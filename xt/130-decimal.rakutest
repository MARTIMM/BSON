use v6;
use Test;
use BSON::Decimal128;

#-------------------------------------------------------------------------------
subtest "128 bit decimal", {
  my BSON::Decimal128 $d128 .= new(:endian(big-endian));

  $d128.reset-buf;
  $d128.set-bits( 2, 50, 126, 127);
  is-deeply $d128.d128,
            Buf.new(0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4),
            '.set-bits(); bit array big endian';

  $d128 .= new;
  $d128.reset-buf;
  $d128.set-bits( 2, 50, 126, 127);
  is-deeply $d128.d128,
            Buf.new(4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0),
            '.set-bits(); bit array little endian';

  $d128.reset-buf;
  $d128.set-bits-from-string( 4, '100101010111');
  is-deeply $d128.d128,
            Buf.new(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x57, 9),
            '.set-bits-from-string()';

  $d128.reset-buf;
  $d128.set-value('NaN');
  is-deeply $d128.d128,
            Buf.new(3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x7f),
            'set-value(): NaN';
  $d128.reset-buf;
  $d128.set-value('-NaN');
  is-deeply $d128.d128,
            Buf.new(3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff),
            'set-value(): -NaN';

  $d128.reset-buf;
  $d128.set-value('Inf');
  is-deeply $d128.d128,
            Buf.new(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x7f),
            'set-value(): Inf';

  $d128.reset-buf;
  $d128.set-value('123.456');
  is-deeply $d128.d128,
            Buf.new( 0xDD, 0x24, 0x06, 0x81, 0x95, 0x43, 0x8B, 0x6C,
                     0xE7, 0xFB, 0xA9, 0xF1, 0xD2, 0xED, 0x05, 0x40
                   ),
            'set-value(): 123.456';

  $d128.reset-buf;
  $d128.set-value('0.123');
  is-deeply $d128.d128,
            Buf.new( 0x7D, 0x3F, 0x35, 0x5E, 0xBA, 0x49, 0x0C, 0x02,
                     0x2B, 0x87, 0x16, 0xD9, 0xCE, 0xF7, 0xFB, 0x3F
                   ),
            'set-value(): 0.123';

  $d128.reset-buf;
  $d128.set-value('12398734658976394765976345.456234');
  is-deeply $d128.d128,
            Buf.new( 0x0C, 0x78, 0x99, 0x2E, 0x63, 0x98, 0xDB, 0xF7,
                     0x6C, 0xD8, 0x15, 0x18, 0x31, 0x48, 0x52, 0x40
                   ),
            'set-value(): 0.123';
  
#  for 0 .. 127 -> $bit {
#    $d128.reset-buf;
#    $d128.set-bits($bit);
#  }
}

#-------------------------------------------------------------------------------
done-testing;
=finish








123.456
IEEE calculator
1110110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101
This module
1110110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101



0.123
IEEE calculator
1111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111101
This module
1111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111101

