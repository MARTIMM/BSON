use v6;
use Test;
use BSON::Decimal128;

#-------------------------------------------------------------------------------
subtest "128 bit decimal", {

  my BSON::Decimal128 $d128 .= new(:endian(big-endian));
  $d128.reset-buf;
  $d128.set-bits( 2, 50, 126, 127);
  is-deeply $d128.d128,
            Buf.new(0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4),
            'bit array big endian';

  $d128 .= new;
  $d128.reset-buf;
  $d128.set-bits( 2, 50, 126, 127);
  is-deeply $d128.d128,
            Buf.new(4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0),
            'bit array little endian';

  $d128.reset-buf;
  $d128.set-value('NaN');
  is-deeply $d128.d128,
            Buf.new(3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x7f),
            'NaN';
  $d128.reset-buf;
  $d128.set-value('-NaN');
  is-deeply $d128.d128,
            Buf.new(3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff),
            '-NaN';

  $d128.reset-buf;
  $d128.set-value('Inf');
  is-deeply $d128.d128,
            Buf.new(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x7f),
            'Inf';

  $d128.reset-buf;
  $d128.set-value('123.456');

  $d128.reset-buf;
  $d128.set-value('0.123');


  #`{{
  for < 0 12 -76 12.70 +0.003 017. .5 4E+9 0.73e-7
        Inf -infinity -Infinity NaN nan
      > -> $value {
    $d128.set-value($value.Str);
  }
}}
}

#-------------------------------------------------------------------------------
done-testing;








=finish
123.456
IEEE calculator
1110110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101
This module
1110110111010010111100011010100111111011111001110110110010001011010000111001010110000001000001100010010011011101



0.123
IEEE calculator
1111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111101
This module
1111011111001110110110010001011010000111001010110000001000001100010010011011101001011110001101010011111101111101

