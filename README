BSON encoding for Perl6

http://bsonspec.org/

Usage:

    my $b = BSON.new();
    my Buf $encoded = $b.encode(
        {
            "_id" => BSON::ObjectId.new( "4e4987edfed4c16f8a56ed1d" ),
            "some string" => "foo",
            "some number" => 123,
            "some array" => [ ],
            "some hash" => { },
            "some bool" => Bool::True,
        }
    );
    my $decoded = $b.decode( $encoded );

Current implementation status of conversion between Perl6 and BSON:

    => means one way
    <=> means both ways

    Perl6 .. BSON

    Str <=> UTF-8 string
    Int <=> 32-bit Integer
    Bool <=> Boolean "true" / "false"
    Array <=> Array
    Hash <=> Embedded document
    BSON::ObjectId <=> ObjectId

Extended types:

    BSON::ObjectId - Internal representation is 12 bytes,
        but to keep it consistent with MongoDB presentation described in
        http://dochub.mongodb.org/core/objectids
        constructor accepts string containing 12 hex pairs:

            BSON::ObjectId.new( '4e4987edfed4c16f8a56ed1d' )

        Supports .Str context.
        Internal Buf can be reached by .Buf accessor.

Known limitations:

    Perl6 pack/unpack is currently almost not documented, spec says:

        "Need more documentation and need to figure out
        what Perl 5 things no longer make sense."

    So most work was done using P5 documentation and reading Rakudo source.

    Negative 32 bit integer - currently is converted using "V" pragma -
        which in P5 was reserved for 32 bit unsigned - instead of "l" pragma.
        But it looks like it can convert negative values properly,
        compared with Python BSON MongoDB driver.

    Rats, Reals, Nums - sorry, no "b" pragma yet.

